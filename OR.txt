<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Look Graphics Maruthamunai ‚Äì Daily Accounts Record</title>
<style>
:root {
  --primary: #007bff;
  --secondary: #6c5ce7;
  --success: #28a745;
  --danger: #dc3545;
  --warning: #ffc107;
  --info: #17a2b8;
  --light: #f8f9fa;
  --dark: #343a40;
}

* {
  box-sizing: border-box;
}

body {
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  padding: 20px;
  background: linear-gradient(135deg, #ffeaa7, #fab1a0, #81ecec, #74b9ff);
  background-size: 400% 400%;
  animation: backgroundGradient 15s ease infinite;
  color: #333;
  line-height: 1.6;
}

@keyframes backgroundGradient {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

.container {
  max-width: 1200px;
  margin: 0 auto;
}

.title-box {
  text-align: center;
  font-size: 32px;
  font-weight: bold;
  padding: 25px 15px;
  border-radius: 15px;
  color: white;
  margin: 20px auto;
  max-width: 800px;
  background: linear-gradient(135deg, #ff6b6b, #feca57, #48dbfb, #1dd1a1);
  background-size: 400% 400%;
  box-shadow: 0 0 30px rgba(0,0,0,0.3);
  animation: gradientAnimation 8s ease infinite;
  line-height: 1.2;
}

.subtitle {
  font-size: 20px;
  font-weight: normal;
  margin-top: 8px;
  color: #fff;
}

@keyframes gradientAnimation {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin: 0 -10px;
}

.col {
  flex: 1;
  padding: 0 10px;
  min-width: 300px;
}

.box {
  background: rgba(255,255,255,0.95);
  padding: 20px;
  margin: 20px 0;
  border-radius: 10px;
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  transition: transform 0.3s ease;
}

.box:hover {
  transform: translateY(-5px);
}

.form-group {
  margin-bottom: 15px;
}

label { 
  display: block; 
  margin: 10px 0 5px; 
  font-weight: bold; 
  color: #444;
}

input, select { 
  width: 100%; 
  padding: 10px; 
  margin-bottom: 15px; 
  border: 1px solid #ddd; 
  border-radius: 5px; 
  font-size: 16px;
  transition: border 0.3s;
}

input:focus, select:focus {
  border-color: var(--primary);
  outline: none;
  box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
}

input[readonly] { 
  background-color: #f8f9fa; 
  color: #6c757d;
}

.btn {
  display: inline-block;
  font-weight: 400;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  border: 1px solid transparent;
  padding: 8px 12px;
  font-size: 14px;
  border-radius: 5px;
  cursor: pointer;
  transition: all 0.15s ease-in-out;
}

.btn-primary {
  background: var(--primary);
  color: white;
}

.btn-primary:hover {
  background: #0056b3;
  transform: translateY(-2px);
}

.btn-danger {
  background: var(--danger);
  color: white;
}

.btn-danger:hover {
  background: #b02a37;
  transform: translateY(-2px);
}

.btn-success {
  background: var(--success);
  color: white;
}

.btn-success:hover {
  background: #1e7e34;
  transform: translateY(-2px);
}

.btn-warning {
  background: var(--warning);
  color: #212529;
}

.btn-warning:hover {
  background: #e0a800;
  transform: translateY(-2px);
}

.btn-block {
  display: block;
  width: 100%;
  margin-top: 5px;
  padding: 12px;
  font-size: 16px;
}

.btn-sm {
  padding: 5px 10px;
  font-size: 13px;
}

.action-buttons {
  display: flex;
  gap: 10px;
  margin-top: 15px;
}

.table-wrapper { 
  overflow-x: auto;
  margin: 20px 0;
  border-radius: 10px;
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

table {
  width: 100%;
  border-collapse: collapse;
  background: rgba(255,255,255,0.95);
  min-width: 600px;
}

th, td { 
  border: 1px solid #ddd; 
  padding: 12px; 
  text-align: center; 
}

th { 
  background: var(--primary); 
  color: white; 
  position: sticky;
  top: 0;
}

tr:nth-child(even) {
  background-color: #f8f9fa;
}

tr:hover {
  background-color: #e9ecef;
}

tfoot td { 
  font-weight: bold; 
  background: #f1f1f1; 
}

.summary {
  margin-top: 15px;
  padding: 20px;
  border-radius: 12px;
  font-size: 22px;
  text-align: center;
  font-weight: bold;
  background: linear-gradient(135deg, #6ab04c, #badc58);
  color: white;
  border: 2px solid #27ae60;
  box-shadow: 0 0 15px rgba(0,0,0,0.2);
}

.opening-box {
  background: #ffeaa7;
  color: #2d3436;
  border: 3px dashed #6c5ce7;
  padding: 20px;
  border-radius: 15px;
  font-size: 20px;
  font-weight: bold;
  text-align: center;
  margin-bottom: 20px;
}

.delete-btn {
  background: var(--danger);
  color: white;
  border: none;
  padding: 5px 10px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 13px;
}

.delete-btn:hover { 
  background: #cc0000; 
}

.alert {
  padding: 15px;
  margin-bottom: 20px;
  border: 1px solid transparent;
  border-radius: 5px;
}

.alert-success {
  color: #155724;
  background-color: #d4edda;
  border-color: #c3e6cb;
}

.alert-danger {
  color: #721c24;
  background-color: #f8d7da;
  border-color: #f5c6cb;
}

.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0,0,0,0.5);
}

.modal-content {
  background-color: #fefefe;
  margin: 15% auto;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 5px 15px rgba(0,0,0,0.3);
  width: 80%;
  max-width: 500px;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #dee2e6;
  padding-bottom: 10px;
  margin-bottom: 15px;
}

.close {
  color: #aaa;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

.close:hover {
  color: #000;
}

@media(max-width:768px){
  .title-box { 
    font-size: 24px; 
    padding: 15px;
  }
  
  .subtitle { 
    font-size: 16px; 
  }
  
  .summary { 
    font-size: 18px; 
    padding: 15px; 
  }
  
  .box { 
    padding: 15px; 
  }
  
  .opening-box { 
    font-size: 18px; 
    padding: 15px; 
  }
  
  .row {
    flex-direction: column;
  }
  
  .col {
    width: 100%;
  }
  
  th, td {
    padding: 8px;
  }
}

@media(max-width:480px){
  body {
    padding: 10px;
  }
  
  .title-box {
    font-size: 20px;
  }
  
  .subtitle {
    font-size: 14px;
  }
  
  .box {
    padding: 10px;
  }
  
  .summary {
    font-size: 16px;
    padding: 10px;
  }
  
  .opening-box {
    font-size: 16px;
    padding: 10px;
  }
}
</style>
</head>
<body>
<div class="container">
  <div class="title-box">
    Look Graphics Maruthamunai
    <div class="subtitle">Daily Accounts Record</div>
  </div>

  <div class="row">
    <div class="col">
      <div class="box">
        <div class="opening-box">
          üîë Opening Balance: <input type="number" id="openingBalance" value="10000" oninput="renderTable()">
        </div>

        <div class="form-group">
          <label for="date">Date:</label>
          <input type="date" id="date">
        </div>
        
        <div class="form-group">
          <label for="income">Income (‡Æµ‡Æ∞‡Æµ‡ØÅ):</label>
          <input type="number" id="income" placeholder="Enter income amount">
        </div>
        
        <div class="form-group">
          <label for="expense">Expense (‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ):</label>
          <input type="number" id="expense" placeholder="Enter expense amount">
        </div>

        <div class="form-group">
          <label for="category">Category:</label>
          <select id="category">
            <option value="">-- Select Category --</option>
            <option value="Printing">Printing</option>
            <option value="Design">Design</option>
            <option value="Supplies">Supplies</option>
            <option value="Utilities">Utilities</option>
            <option value="Other">Other</option>
          </select>
        </div>

        <div class="form-group">
          <label for="description">Description:</label>
          <input type="text" id="description" placeholder="Enter description">
        </div>

        <button class="btn btn-primary btn-block" onclick="addRecord()">Add Record</button>
        
        <div class="action-buttons">
          <button class="btn btn-danger btn-block" onclick="clearRecords()">Clear All</button>
          <button class="btn btn-success btn-block" onclick="exportCSV()">üìÇ Export CSV</button>
        </div>

        <div class="summary" id="summaryBox">
          ‚úÖ Closing Balance: 0.00 ‡Æ∞‡ØÇ‡Æ™‡Ææ‡ÆØ‡Øç
        </div>
      </div>
    </div>
    
    <div class="col">
      <div class="box">
        <h3 style="margin-top: 0; text-align: center;">Financial Summary</h3>
        
        <div class="form-group">
          <label for="filterDate">Filter by Date:</label>
          <input type="date" id="filterDate" onchange="filterRecords()">
        </div>
        
        <div class="form-group">
          <label for="filterCategory">Filter by Category:</label>
          <select id="filterCategory" onchange="filterRecords()">
            <option value="">All Categories</option>
            <option value="Printing">Printing</option>
            <option value="Design">Design</option>
            <option value="Supplies">Supplies</option>
            <option value="Utilities">Utilities</option>
            <option value="Other">Other</option>
          </select>
        </div>
        
        <div style="display: flex; justify-content: space-between; margin-bottom: 15px;">
          <div style="text-align: center; flex: 1; padding: 10px; background: #e8f5e8; border-radius: 5px; margin-right: 5px;">
            <div style="font-size: 14px; color: #555;">Total Income</div>
            <div style="font-size: 20px; font-weight: bold; color: #28a745;" id="summaryIncome">0.00</div>
          </div>
          <div style="text-align: center; flex: 1; padding: 10px; background: #ffe6e6; border-radius: 5px; margin: 0 5px;">
            <div style="font-size: 14px; color: #555;">Total Expense</div>
            <div style="font-size: 20px; font-weight: bold; color: #dc3545;" id="summaryExpense">0.00</div>
          </div>
          <div style="text-align: center; flex: 1; padding: 10px; background: #e6f3ff; border-radius: 5px; margin-left: 5px;">
            <div style="font-size: 14px; color: #555;">Net Profit</div>
            <div style="font-size: 20px; font-weight: bold; color: #007bff;" id="summaryProfit">0.00</div>
          </div>
        </div>
        
        <button class="btn btn-warning btn-block" onclick="showMonthlyReport()">üìä Monthly Report</button>
      </div>
    </div>
  </div>

  <div class="table-wrapper">
    <table id="recordTable">
      <thead>
        <tr>
          <th>Date</th>
          <th>Income (‡Æµ‡Æ∞‡Æµ‡ØÅ)</th>
          <th>Expense (‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ)</th>
          <th>Category</th>
          <th>Description</th>
          <th>Profit (‡Æ≤‡Ææ‡Æ™‡ÆÆ‡Øç)</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody></tbody>
      <tfoot>
        <tr>
          <td>Total</td>
          <td id="totalIncome">0</td>
          <td id="totalExpense">0</td>
          <td>--</td>
          <td>--</td>
          <td id="totalProfit">0</td>
          <td>--</td>
        </tr>
      </tfoot>
    </table>
  </div>
</div>

<!-- Monthly Report Modal -->
<div id="monthlyReportModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h2>Monthly Financial Report</h2>
      <span class="close" onclick="closeMonthlyReport()">&times;</span>
    </div>
    <div id="monthlyReportContent">
      <!-- Monthly report will be generated here -->
    </div>
  </div>
</div>

<script>
let records = JSON.parse(localStorage.getItem("records")) || [];

window.onload = function() { 
  // Set today's date as default
  document.getElementById("date").valueAsDate = new Date();
  renderTable(); 
};

function addRecord() {
  let dateInput = document.getElementById("date");
  let incomeInput = document.getElementById("income");
  let expenseInput = document.getElementById("expense");
  let categoryInput = document.getElementById("category");
  let descriptionInput = document.getElementById("description");

  let date = dateInput.value;
  let income = parseFloat(incomeInput.value) || 0;
  let expense = parseFloat(expenseInput.value) || 0;
  let category = categoryInput.value || "Other";
  let description = descriptionInput.value || "";

  if(!date){ 
    showAlert("Date is required!", "danger");
    return; 
  }

  records.push({date, income, expense, category, description});
  localStorage.setItem("records", JSON.stringify(records));
  renderTable();

  incomeInput.value = "";
  expenseInput.value = "";
  descriptionInput.value = "";
  categoryInput.value = "";
  
  showAlert("Record added successfully!", "success");
}

function renderTable() {
  let tbody = document.getElementById("recordTable").getElementsByTagName("tbody")[0];
  tbody.innerHTML = "";

  let openingBalance = parseFloat(document.getElementById("openingBalance").value) || 0;
  let totalProfit = 0;
  let totalIncome = 0;
  let totalExpense = 0;

  // Get filter values
  let filterDate = document.getElementById("filterDate").value;
  let filterCategory = document.getElementById("filterCategory").value;
  
  // Filter records
  let filteredRecords = records.filter(record => {
    let dateMatch = !filterDate || record.date === filterDate;
    let categoryMatch = !filterCategory || record.category === filterCategory;
    return dateMatch && categoryMatch;
  });

  filteredRecords.forEach((r,index)=>{
    let income = parseFloat(r.income) || 0;
    let expense = parseFloat(r.expense) || 0;
    let profit = income - expense;

    totalProfit += profit;
    totalIncome += income;
    totalExpense += expense;

    let row = tbody.insertRow();
    row.insertCell(0).innerText = r.date;
    row.insertCell(1).innerText = income.toFixed(2);
    row.insertCell(2).innerText = expense.toFixed(2);
    row.insertCell(3).innerText = r.category;
    row.insertCell(4).innerText = r.description;
    row.insertCell(5).innerText = profit.toFixed(2);

    let actionCell = row.insertCell(6);
    let delBtn = document.createElement("button");
    delBtn.innerText = "Delete";
    delBtn.className = "btn btn-danger btn-sm";
    delBtn.onclick = ()=>{ deleteRecord(index); };
    actionCell.appendChild(delBtn);
  });

  document.getElementById("totalIncome").innerText = totalIncome.toFixed(2);
  document.getElementById("totalExpense").innerText = totalExpense.toFixed(2);
  document.getElementById("totalProfit").innerText = totalProfit.toFixed(2);
  
  // Update summary boxes
  document.getElementById("summaryIncome").innerText = totalIncome.toFixed(2);
  document.getElementById("summaryExpense").innerText = totalExpense.toFixed(2);
  document.getElementById("summaryProfit").innerText = totalProfit.toFixed(2);

  let closingBalance = openingBalance + totalProfit;
  document.getElementById("summaryBox").innerText = "‚úÖ Closing Balance: " + closingBalance.toFixed(2) + " ‡Æ∞‡ØÇ‡Æ™‡Ææ‡ÆØ‡Øç";
}

function deleteRecord(index) {
  if(confirm("Do you want to delete this record?")){
    records.splice(index,1);
    localStorage.setItem("records", JSON.stringify(records));
    renderTable();
    showAlert("Record deleted successfully!", "success");
  }
}

function clearRecords(){
  if(confirm("Are you sure you want to clear all records? This action cannot be undone.")){
    records=[];
    localStorage.removeItem("records");
    renderTable();
    showAlert("All records cleared!", "success");
  }
}

function exportCSV(){
  if(records.length===0){ 
    showAlert("No records to export!", "danger");
    return; 
  }
  
  let openingBalance = parseFloat(document.getElementById("openingBalance").value) || 0;
  let csv="Date,Income,Expense,Category,Description,Profit\n";
  let totalProfit = 0, totalIncome = 0, totalExpense = 0;

  records.forEach(r=>{
    let income = parseFloat(r.income) || 0;
    let expense = parseFloat(r.expense) || 0;
    let profit = income - expense;
    totalProfit += profit;
    totalIncome += income;
    totalExpense += expense;
    csv += `${r.date},${income.toFixed(2)},${expense.toFixed(2)},${r.category},${r.description},${profit.toFixed(2)}\n`;
  });

  csv += `Total,${totalIncome.toFixed(2)},${totalExpense.toFixed(2)},,,${totalProfit.toFixed(2)}\n`;
  csv += `Opening Balance,,,,,${openingBalance.toFixed(2)}\n`;
  csv += `Closing Balance,,,,,${(openingBalance + totalProfit).toFixed(2)}\n`;

  let blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
  let link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = "profit-records-" + new Date().toISOString().slice(0,10) + ".csv";
  link.click();
  
  showAlert("CSV exported successfully!", "success");
}

function filterRecords() {
  renderTable();
}

function showMonthlyReport() {
  if(records.length === 0) {
    showAlert("No records available for monthly report!", "danger");
    return;
  }
  
  let monthlyData = {};
  
  // Group records by month
  records.forEach(record => {
    let date = new Date(record.date);
    let monthYear = date.toLocaleString('default', { month: 'long', year: 'numeric' });
    
    if(!monthlyData[monthYear]) {
      monthlyData[monthYear] = {
        income: 0,
        expense: 0,
        profit: 0
      };
    }
    
    monthlyData[monthYear].income += parseFloat(record.income) || 0;
    monthlyData[monthYear].expense += parseFloat(record.expense) || 0;
    monthlyData[monthYear].profit += (parseFloat(record.income) || 0) - (parseFloat(record.expense) || 0);
  });
  
  // Generate report HTML
  let reportHTML = '<table style="width: 100%; border-collapse: collapse; margin-top: 10px;">';
  reportHTML += '<thead><tr><th style="border: 1px solid #ddd; padding: 8px; text-align: left;">Month</th><th style="border: 1px solid #ddd; padding: 8px; text-align: right;">Income</th><th style="border: 1px solid #ddd; padding: 8px; text-align: right;">Expense</th><th style="border: 1px solid #ddd; padding: 8px; text-align: right;">Profit</th></tr></thead><tbody>';
  
  let totalIncome = 0, totalExpense = 0, totalProfit = 0;
  
  for(let month in monthlyData) {
    reportHTML += `<tr>
      <td style="border: 1px solid #ddd; padding: 8px;">${month}</td>
      <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">${monthlyData[month].income.toFixed(2)}</td>
      <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">${monthlyData[month].expense.toFixed(2)}</td>
      <td style="border: 1px solid #ddd; padding: 8px; text-align: right; color: ${monthlyData[month].profit >= 0 ? 'green' : 'red'}">${monthlyData[month].profit.toFixed(2)}</td>
    </tr>`;
    
    totalIncome += monthlyData[month].income;
    totalExpense += monthlyData[month].expense;
    totalProfit += monthlyData[month].profit;
  }
  
  reportHTML += `<tr style="font-weight: bold; background-color: #f8f9fa;">
    <td style="border: 1px solid #ddd; padding: 8px;">Total</td>
    <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">${totalIncome.toFixed(2)}</td>
    <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">${totalExpense.toFixed(2)}</td>
    <td style="border: 1px solid #ddd; padding: 8px; text-align: right; color: ${totalProfit >= 0 ? 'green' : 'red'}">${totalProfit.toFixed(2)}</td>
  </tr>`;
  
  reportHTML += '</tbody></table>';
  
  document.getElementById("monthlyReportContent").innerHTML = reportHTML;
  document.getElementById("monthlyReportModal").style.display = "block";
}

function closeMonthlyReport() {
  document.getElementById("monthlyReportModal").style.display = "none";
}

function showAlert(message, type) {
  // Remove any existing alerts
  let existingAlert = document.querySelector('.alert');
  if(existingAlert) {
    existingAlert.remove();
  }
  
  // Create new alert
  let alert = document.createElement('div');
  alert.className = `alert alert-${type}`;
  alert.innerText = message;
  
  // Insert after title box
  let titleBox = document.querySelector('.title-box');
  titleBox.parentNode.insertBefore(alert, titleBox.nextSibling);
  
  // Auto remove after 3 seconds
  setTimeout(() => {
    if(alert.parentNode) {
      alert.parentNode.removeChild(alert);
    }
  }, 3000);
}

// Close modal when clicking outside of it
window.onclick = function(event) {
  let modal = document.getElementById("monthlyReportModal");
  if (event.target == modal) {
    modal.style.display = "none";
  }
}
</script>
</body>
</html>